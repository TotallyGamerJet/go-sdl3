//go:build windows || unix

package ttf

import (
	sdl "github.com/Zyko0/go-sdl3"
	puregogen "github.com/Zyko0/purego-gen"
	purego "github.com/ebitengine/purego"
	"runtime"
	"unsafe"
)

// File generated by github.com/Zyko0/purego-gen. DO NOT EDIT.

var (
	// Library handles
	_hnd_ttf uintptr
	// Symbols
	// ttf
	_addr_TTF_Version                                uintptr
	_addr_TTF_GetFreeTypeVersion                     uintptr
	_addr_TTF_GetHarfBuzzVersion                     uintptr
	_addr_TTF_Init                                   uintptr
	_addr_TTF_OpenFontWithProperties                 uintptr
	_addr_TTF_CopyFont                               uintptr
	_addr_TTF_GetFontProperties                      uintptr
	_addr_TTF_GetFontGeneration                      uintptr
	_addr_TTF_AddFallbackFont                        uintptr
	_addr_TTF_RemoveFallbackFont                     uintptr
	_addr_TTF_ClearFallbackFonts                     uintptr
	_addr_TTF_GetFontDPI                             uintptr
	_addr_TTF_SetFontStyle                           uintptr
	_addr_TTF_GetFontStyle                           uintptr
	_addr_TTF_SetFontOutline                         uintptr
	_addr_TTF_GetFontOutline                         uintptr
	_addr_TTF_SetFontHinting                         uintptr
	_addr_TTF_GetNumFontFaces                        uintptr
	_addr_TTF_GetFontHinting                         uintptr
	_addr_TTF_SetFontWrapAlignment                   uintptr
	_addr_TTF_GetFontWrapAlignment                   uintptr
	_addr_TTF_GetFontHeight                          uintptr
	_addr_TTF_GetFontAscent                          uintptr
	_addr_TTF_GetFontDescent                         uintptr
	_addr_TTF_SetFontLineSkip                        uintptr
	_addr_TTF_GetFontLineSkip                        uintptr
	_addr_TTF_SetFontKerning                         uintptr
	_addr_TTF_GetFontKerning                         uintptr
	_addr_TTF_FontIsFixedWidth                       uintptr
	_addr_TTF_GetFontFamilyName                      uintptr
	_addr_TTF_GetFontStyleName                       uintptr
	_addr_TTF_SetFontDirection                       uintptr
	_addr_TTF_GetFontDirection                       uintptr
	_addr_TTF_SetFontScript                          uintptr
	_addr_TTF_GetFontScript                          uintptr
	_addr_TTF_GetGlyphScript                         uintptr
	_addr_TTF_FontHasGlyph                           uintptr
	_addr_TTF_GetGlyphImage                          uintptr
	_addr_TTF_GetGlyphImageForIndex                  uintptr
	_addr_TTF_GetGlyphMetrics                        uintptr
	_addr_TTF_GetStringSize                          uintptr
	_addr_TTF_GetStringSizeWrapped                   uintptr
	_addr_TTF_MeasureString                          uintptr
	_addr_TTF_CreateSurfaceTextEngine                uintptr
	_addr_TTF_DrawSurfaceText                        uintptr
	_addr_TTF_DestroySurfaceTextEngine               uintptr
	_addr_TTF_CreateRendererTextEngine               uintptr
	_addr_TTF_CreateRendererTextEngineWithProperties uintptr
	_addr_TTF_DestroyRendererTextEngine              uintptr
	_addr_TTF_CreateGPUTextEngine                    uintptr
	_addr_TTF_CreateGPUTextEngineWithProperties      uintptr
	_addr_TTF_GetGPUTextDrawData                     uintptr
	_addr_TTF_DestroyGPUTextEngine                   uintptr
	_addr_TTF_SetGPUTextEngineWinding                uintptr
	_addr_TTF_GetGPUTextEngineWinding                uintptr
	_addr_TTF_CreateText                             uintptr
	_addr_TTF_GetTextProperties                      uintptr
	_addr_TTF_SetTextEngine                          uintptr
	_addr_TTF_GetTextEngine                          uintptr
	_addr_TTF_SetTextFont                            uintptr
	_addr_TTF_GetTextFont                            uintptr
	_addr_TTF_SetTextDirection                       uintptr
	_addr_TTF_GetTextDirection                       uintptr
	_addr_TTF_SetTextScript                          uintptr
	_addr_TTF_GetTextScript                          uintptr
	_addr_TTF_SetTextColor                           uintptr
	_addr_TTF_GetTextColor                           uintptr
	_addr_TTF_GetTextColorFloat                      uintptr
	_addr_TTF_SetTextPosition                        uintptr
	_addr_TTF_GetTextPosition                        uintptr
	_addr_TTF_SetTextWrapWidth                       uintptr
	_addr_TTF_GetTextWrapWidth                       uintptr
	_addr_TTF_SetTextWrapWhitespaceVisible           uintptr
	_addr_TTF_TextWrapWhitespaceVisible              uintptr
	_addr_TTF_SetTextString                          uintptr
	_addr_TTF_InsertTextString                       uintptr
	_addr_TTF_AppendTextString                       uintptr
	_addr_TTF_DeleteTextString                       uintptr
	_addr_TTF_GetTextSize                            uintptr
	_addr_TTF_GetTextSubString                       uintptr
	_addr_TTF_GetTextSubStringForLine                uintptr
	_addr_TTF_GetTextSubStringsForRange              uintptr
	_addr_TTF_GetTextSubStringForPoint               uintptr
	_addr_TTF_GetPreviousTextSubString               uintptr
	_addr_TTF_GetNextTextSubString                   uintptr
	_addr_TTF_UpdateText                             uintptr
	_addr_TTF_DestroyText                            uintptr
	_addr_TTF_CloseFont                              uintptr
	_addr_TTF_Quit                                   uintptr
	_addr_TTF_WasInit                                uintptr
)

func initialize() {
	var err error

	// Symbols ttf
	_addr_TTF_Version, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_Version")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_Version")
	}
	_addr_TTF_GetFreeTypeVersion, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_GetFreeTypeVersion")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_GetFreeTypeVersion")
	}
	_addr_TTF_GetHarfBuzzVersion, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_GetHarfBuzzVersion")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_GetHarfBuzzVersion")
	}
	_addr_TTF_Init, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_Init")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_Init")
	}
	_addr_TTF_OpenFontWithProperties, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_OpenFontWithProperties")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_OpenFontWithProperties")
	}
	_addr_TTF_CopyFont, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_CopyFont")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_CopyFont")
	}
	_addr_TTF_GetFontProperties, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_GetFontProperties")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_GetFontProperties")
	}
	_addr_TTF_GetFontGeneration, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_GetFontGeneration")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_GetFontGeneration")
	}
	_addr_TTF_AddFallbackFont, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_AddFallbackFont")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_AddFallbackFont")
	}
	_addr_TTF_RemoveFallbackFont, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_RemoveFallbackFont")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_RemoveFallbackFont")
	}
	_addr_TTF_ClearFallbackFonts, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_ClearFallbackFonts")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_ClearFallbackFonts")
	}
	_addr_TTF_GetFontDPI, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_GetFontDPI")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_GetFontDPI")
	}
	_addr_TTF_SetFontStyle, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_SetFontStyle")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_SetFontStyle")
	}
	_addr_TTF_GetFontStyle, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_GetFontStyle")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_GetFontStyle")
	}
	_addr_TTF_SetFontOutline, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_SetFontOutline")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_SetFontOutline")
	}
	_addr_TTF_GetFontOutline, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_GetFontOutline")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_GetFontOutline")
	}
	_addr_TTF_SetFontHinting, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_SetFontHinting")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_SetFontHinting")
	}
	_addr_TTF_GetNumFontFaces, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_GetNumFontFaces")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_GetNumFontFaces")
	}
	_addr_TTF_GetFontHinting, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_GetFontHinting")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_GetFontHinting")
	}
	_addr_TTF_SetFontWrapAlignment, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_SetFontWrapAlignment")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_SetFontWrapAlignment")
	}
	_addr_TTF_GetFontWrapAlignment, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_GetFontWrapAlignment")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_GetFontWrapAlignment")
	}
	_addr_TTF_GetFontHeight, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_GetFontHeight")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_GetFontHeight")
	}
	_addr_TTF_GetFontAscent, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_GetFontAscent")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_GetFontAscent")
	}
	_addr_TTF_GetFontDescent, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_GetFontDescent")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_GetFontDescent")
	}
	_addr_TTF_SetFontLineSkip, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_SetFontLineSkip")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_SetFontLineSkip")
	}
	_addr_TTF_GetFontLineSkip, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_GetFontLineSkip")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_GetFontLineSkip")
	}
	_addr_TTF_SetFontKerning, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_SetFontKerning")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_SetFontKerning")
	}
	_addr_TTF_GetFontKerning, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_GetFontKerning")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_GetFontKerning")
	}
	_addr_TTF_FontIsFixedWidth, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_FontIsFixedWidth")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_FontIsFixedWidth")
	}
	_addr_TTF_GetFontFamilyName, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_GetFontFamilyName")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_GetFontFamilyName")
	}
	_addr_TTF_GetFontStyleName, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_GetFontStyleName")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_GetFontStyleName")
	}
	_addr_TTF_SetFontDirection, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_SetFontDirection")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_SetFontDirection")
	}
	_addr_TTF_GetFontDirection, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_GetFontDirection")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_GetFontDirection")
	}
	_addr_TTF_SetFontScript, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_SetFontScript")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_SetFontScript")
	}
	_addr_TTF_GetFontScript, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_GetFontScript")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_GetFontScript")
	}
	_addr_TTF_GetGlyphScript, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_GetGlyphScript")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_GetGlyphScript")
	}
	_addr_TTF_FontHasGlyph, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_FontHasGlyph")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_FontHasGlyph")
	}
	_addr_TTF_GetGlyphImage, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_GetGlyphImage")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_GetGlyphImage")
	}
	_addr_TTF_GetGlyphImageForIndex, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_GetGlyphImageForIndex")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_GetGlyphImageForIndex")
	}
	_addr_TTF_GetGlyphMetrics, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_GetGlyphMetrics")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_GetGlyphMetrics")
	}
	_addr_TTF_GetStringSize, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_GetStringSize")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_GetStringSize")
	}
	_addr_TTF_GetStringSizeWrapped, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_GetStringSizeWrapped")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_GetStringSizeWrapped")
	}
	_addr_TTF_MeasureString, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_MeasureString")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_MeasureString")
	}
	_addr_TTF_CreateSurfaceTextEngine, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_CreateSurfaceTextEngine")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_CreateSurfaceTextEngine")
	}
	_addr_TTF_DrawSurfaceText, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_DrawSurfaceText")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_DrawSurfaceText")
	}
	_addr_TTF_DestroySurfaceTextEngine, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_DestroySurfaceTextEngine")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_DestroySurfaceTextEngine")
	}
	_addr_TTF_CreateRendererTextEngine, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_CreateRendererTextEngine")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_CreateRendererTextEngine")
	}
	_addr_TTF_CreateRendererTextEngineWithProperties, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_CreateRendererTextEngineWithProperties")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_CreateRendererTextEngineWithProperties")
	}
	_addr_TTF_DestroyRendererTextEngine, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_DestroyRendererTextEngine")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_DestroyRendererTextEngine")
	}
	_addr_TTF_CreateGPUTextEngine, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_CreateGPUTextEngine")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_CreateGPUTextEngine")
	}
	_addr_TTF_CreateGPUTextEngineWithProperties, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_CreateGPUTextEngineWithProperties")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_CreateGPUTextEngineWithProperties")
	}
	_addr_TTF_GetGPUTextDrawData, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_GetGPUTextDrawData")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_GetGPUTextDrawData")
	}
	_addr_TTF_DestroyGPUTextEngine, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_DestroyGPUTextEngine")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_DestroyGPUTextEngine")
	}
	_addr_TTF_SetGPUTextEngineWinding, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_SetGPUTextEngineWinding")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_SetGPUTextEngineWinding")
	}
	_addr_TTF_GetGPUTextEngineWinding, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_GetGPUTextEngineWinding")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_GetGPUTextEngineWinding")
	}
	_addr_TTF_CreateText, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_CreateText")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_CreateText")
	}
	_addr_TTF_GetTextProperties, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_GetTextProperties")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_GetTextProperties")
	}
	_addr_TTF_SetTextEngine, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_SetTextEngine")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_SetTextEngine")
	}
	_addr_TTF_GetTextEngine, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_GetTextEngine")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_GetTextEngine")
	}
	_addr_TTF_SetTextFont, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_SetTextFont")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_SetTextFont")
	}
	_addr_TTF_GetTextFont, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_GetTextFont")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_GetTextFont")
	}
	_addr_TTF_SetTextDirection, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_SetTextDirection")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_SetTextDirection")
	}
	_addr_TTF_GetTextDirection, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_GetTextDirection")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_GetTextDirection")
	}
	_addr_TTF_SetTextScript, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_SetTextScript")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_SetTextScript")
	}
	_addr_TTF_GetTextScript, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_GetTextScript")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_GetTextScript")
	}
	_addr_TTF_SetTextColor, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_SetTextColor")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_SetTextColor")
	}
	_addr_TTF_GetTextColor, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_GetTextColor")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_GetTextColor")
	}
	_addr_TTF_GetTextColorFloat, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_GetTextColorFloat")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_GetTextColorFloat")
	}
	_addr_TTF_SetTextPosition, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_SetTextPosition")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_SetTextPosition")
	}
	_addr_TTF_GetTextPosition, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_GetTextPosition")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_GetTextPosition")
	}
	_addr_TTF_SetTextWrapWidth, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_SetTextWrapWidth")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_SetTextWrapWidth")
	}
	_addr_TTF_GetTextWrapWidth, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_GetTextWrapWidth")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_GetTextWrapWidth")
	}
	_addr_TTF_SetTextWrapWhitespaceVisible, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_SetTextWrapWhitespaceVisible")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_SetTextWrapWhitespaceVisible")
	}
	_addr_TTF_TextWrapWhitespaceVisible, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_TextWrapWhitespaceVisible")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_TextWrapWhitespaceVisible")
	}
	_addr_TTF_SetTextString, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_SetTextString")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_SetTextString")
	}
	_addr_TTF_InsertTextString, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_InsertTextString")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_InsertTextString")
	}
	_addr_TTF_AppendTextString, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_AppendTextString")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_AppendTextString")
	}
	_addr_TTF_DeleteTextString, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_DeleteTextString")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_DeleteTextString")
	}
	_addr_TTF_GetTextSize, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_GetTextSize")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_GetTextSize")
	}
	_addr_TTF_GetTextSubString, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_GetTextSubString")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_GetTextSubString")
	}
	_addr_TTF_GetTextSubStringForLine, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_GetTextSubStringForLine")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_GetTextSubStringForLine")
	}
	_addr_TTF_GetTextSubStringsForRange, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_GetTextSubStringsForRange")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_GetTextSubStringsForRange")
	}
	_addr_TTF_GetTextSubStringForPoint, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_GetTextSubStringForPoint")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_GetTextSubStringForPoint")
	}
	_addr_TTF_GetPreviousTextSubString, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_GetPreviousTextSubString")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_GetPreviousTextSubString")
	}
	_addr_TTF_GetNextTextSubString, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_GetNextTextSubString")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_GetNextTextSubString")
	}
	_addr_TTF_UpdateText, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_UpdateText")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_UpdateText")
	}
	_addr_TTF_DestroyText, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_DestroyText")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_DestroyText")
	}
	_addr_TTF_CloseFont, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_CloseFont")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_CloseFont")
	}
	_addr_TTF_Quit, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_Quit")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_Quit")
	}
	_addr_TTF_WasInit, err = puregogen.OpenSymbol(_hnd_ttf, "TTF_WasInit")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: TTF_WasInit")
	}

	iVersion = func() int32 {
		_r0, _, _ := purego.SyscallN(_addr_TTF_Version)
		__r0 := int32(_r0)
		return __r0
	}
	iGetFreeTypeVersion = func(major *int32, minor *int32, patch *int32) {
		_major := uintptr(unsafe.Pointer(major))
		_minor := uintptr(unsafe.Pointer(minor))
		_patch := uintptr(unsafe.Pointer(patch))
		purego.SyscallN(_addr_TTF_GetFreeTypeVersion, _major, _minor, _patch)
	}
	iGetHarfBuzzVersion = func(major *int32, minor *int32, patch *int32) {
		_major := uintptr(unsafe.Pointer(major))
		_minor := uintptr(unsafe.Pointer(minor))
		_patch := uintptr(unsafe.Pointer(patch))
		purego.SyscallN(_addr_TTF_GetHarfBuzzVersion, _major, _minor, _patch)
	}
	iInit = func() bool {
		_r0, _, _ := purego.SyscallN(_addr_TTF_Init)
		__r0 := _r0 != 0
		return __r0
	}
	purego.RegisterLibFunc(&iOpenFont, _hnd_ttf, "TTF_OpenFont")
	purego.RegisterLibFunc(&iOpenFontIO, _hnd_ttf, "TTF_OpenFontIO")
	iOpenFontWithProperties = func(props sdl.PropertiesID) *Font {
		_props := uintptr(props)
		_r0, _, _ := purego.SyscallN(_addr_TTF_OpenFontWithProperties, _props)
		__r0 := (*Font)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iCopyFont = func(existing_font *Font) *Font {
		_existing_font := uintptr(unsafe.Pointer(existing_font))
		_r0, _, _ := purego.SyscallN(_addr_TTF_CopyFont, _existing_font)
		__r0 := (*Font)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iGetFontProperties = func(font *Font) sdl.PropertiesID {
		_font := uintptr(unsafe.Pointer(font))
		_r0, _, _ := purego.SyscallN(_addr_TTF_GetFontProperties, _font)
		__r0 := sdl.PropertiesID(_r0)
		return __r0
	}
	iGetFontGeneration = func(font *Font) uint32 {
		_font := uintptr(unsafe.Pointer(font))
		_r0, _, _ := purego.SyscallN(_addr_TTF_GetFontGeneration, _font)
		__r0 := uint32(_r0)
		return __r0
	}
	iAddFallbackFont = func(font *Font, fallback *Font) bool {
		_font := uintptr(unsafe.Pointer(font))
		_fallback := uintptr(unsafe.Pointer(fallback))
		_r0, _, _ := purego.SyscallN(_addr_TTF_AddFallbackFont, _font, _fallback)
		__r0 := _r0 != 0
		return __r0
	}
	iRemoveFallbackFont = func(font *Font, fallback *Font) {
		_font := uintptr(unsafe.Pointer(font))
		_fallback := uintptr(unsafe.Pointer(fallback))
		purego.SyscallN(_addr_TTF_RemoveFallbackFont, _font, _fallback)
	}
	iClearFallbackFonts = func(font *Font) {
		_font := uintptr(unsafe.Pointer(font))
		purego.SyscallN(_addr_TTF_ClearFallbackFonts, _font)
	}
	purego.RegisterLibFunc(&iSetFontSize, _hnd_ttf, "TTF_SetFontSize")
	purego.RegisterLibFunc(&iSetFontSizeDPI, _hnd_ttf, "TTF_SetFontSizeDPI")
	purego.RegisterLibFunc(&iGetFontSize, _hnd_ttf, "TTF_GetFontSize")
	iGetFontDPI = func(font *Font, hdpi *int32, vdpi *int32) bool {
		_font := uintptr(unsafe.Pointer(font))
		_hdpi := uintptr(unsafe.Pointer(hdpi))
		_vdpi := uintptr(unsafe.Pointer(vdpi))
		_r0, _, _ := purego.SyscallN(_addr_TTF_GetFontDPI, _font, _hdpi, _vdpi)
		__r0 := _r0 != 0
		return __r0
	}
	iSetFontStyle = func(font *Font, style FontStyleFlags) {
		_font := uintptr(unsafe.Pointer(font))
		_style := uintptr(style)
		purego.SyscallN(_addr_TTF_SetFontStyle, _font, _style)
	}
	iGetFontStyle = func(font *Font) FontStyleFlags {
		_font := uintptr(unsafe.Pointer(font))
		_r0, _, _ := purego.SyscallN(_addr_TTF_GetFontStyle, _font)
		__r0 := FontStyleFlags(_r0)
		return __r0
	}
	iSetFontOutline = func(font *Font, outline int32) bool {
		_font := uintptr(unsafe.Pointer(font))
		_outline := uintptr(outline)
		_r0, _, _ := purego.SyscallN(_addr_TTF_SetFontOutline, _font, _outline)
		__r0 := _r0 != 0
		return __r0
	}
	iGetFontOutline = func(font *Font) int32 {
		_font := uintptr(unsafe.Pointer(font))
		_r0, _, _ := purego.SyscallN(_addr_TTF_GetFontOutline, _font)
		__r0 := int32(_r0)
		return __r0
	}
	iSetFontHinting = func(font *Font, hinting HintingFlags) {
		_font := uintptr(unsafe.Pointer(font))
		_hinting := uintptr(hinting)
		purego.SyscallN(_addr_TTF_SetFontHinting, _font, _hinting)
	}
	iGetNumFontFaces = func(font *Font) int32 {
		_font := uintptr(unsafe.Pointer(font))
		_r0, _, _ := purego.SyscallN(_addr_TTF_GetNumFontFaces, _font)
		__r0 := int32(_r0)
		return __r0
	}
	iGetFontHinting = func(font *Font) HintingFlags {
		_font := uintptr(unsafe.Pointer(font))
		_r0, _, _ := purego.SyscallN(_addr_TTF_GetFontHinting, _font)
		__r0 := HintingFlags(_r0)
		return __r0
	}
	iSetFontWrapAlignment = func(font *Font, align HorizontalAlignment) {
		_font := uintptr(unsafe.Pointer(font))
		_align := uintptr(align)
		purego.SyscallN(_addr_TTF_SetFontWrapAlignment, _font, _align)
	}
	iGetFontWrapAlignment = func(font *Font) HorizontalAlignment {
		_font := uintptr(unsafe.Pointer(font))
		_r0, _, _ := purego.SyscallN(_addr_TTF_GetFontWrapAlignment, _font)
		__r0 := HorizontalAlignment(_r0)
		return __r0
	}
	iGetFontHeight = func(font *Font) int32 {
		_font := uintptr(unsafe.Pointer(font))
		_r0, _, _ := purego.SyscallN(_addr_TTF_GetFontHeight, _font)
		__r0 := int32(_r0)
		return __r0
	}
	iGetFontAscent = func(font *Font) int32 {
		_font := uintptr(unsafe.Pointer(font))
		_r0, _, _ := purego.SyscallN(_addr_TTF_GetFontAscent, _font)
		__r0 := int32(_r0)
		return __r0
	}
	iGetFontDescent = func(font *Font) int32 {
		_font := uintptr(unsafe.Pointer(font))
		_r0, _, _ := purego.SyscallN(_addr_TTF_GetFontDescent, _font)
		__r0 := int32(_r0)
		return __r0
	}
	iSetFontLineSkip = func(font *Font, lineskip int32) {
		_font := uintptr(unsafe.Pointer(font))
		_lineskip := uintptr(lineskip)
		purego.SyscallN(_addr_TTF_SetFontLineSkip, _font, _lineskip)
	}
	iGetFontLineSkip = func(font *Font) int32 {
		_font := uintptr(unsafe.Pointer(font))
		_r0, _, _ := purego.SyscallN(_addr_TTF_GetFontLineSkip, _font)
		__r0 := int32(_r0)
		return __r0
	}
	iSetFontKerning = func(font *Font, enabled bool) {
		_font := uintptr(unsafe.Pointer(font))
		_enabled := uintptr(0)
		if enabled {
			_enabled = 1
		}
		purego.SyscallN(_addr_TTF_SetFontKerning, _font, _enabled)
	}
	iGetFontKerning = func(font *Font) bool {
		_font := uintptr(unsafe.Pointer(font))
		_r0, _, _ := purego.SyscallN(_addr_TTF_GetFontKerning, _font)
		__r0 := _r0 != 0
		return __r0
	}
	iFontIsFixedWidth = func(font *Font) bool {
		_font := uintptr(unsafe.Pointer(font))
		_r0, _, _ := purego.SyscallN(_addr_TTF_FontIsFixedWidth, _font)
		__r0 := _r0 != 0
		return __r0
	}
	iGetFontFamilyName = func(font *Font) string {
		_font := uintptr(unsafe.Pointer(font))
		_r0, _, _ := purego.SyscallN(_addr_TTF_GetFontFamilyName, _font)
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iGetFontStyleName = func(font *Font) string {
		_font := uintptr(unsafe.Pointer(font))
		_r0, _, _ := purego.SyscallN(_addr_TTF_GetFontStyleName, _font)
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iSetFontDirection = func(font *Font, direction Direction) bool {
		_font := uintptr(unsafe.Pointer(font))
		_direction := uintptr(direction)
		_r0, _, _ := purego.SyscallN(_addr_TTF_SetFontDirection, _font, _direction)
		__r0 := _r0 != 0
		return __r0
	}
	iGetFontDirection = func(font *Font) Direction {
		_font := uintptr(unsafe.Pointer(font))
		_r0, _, _ := purego.SyscallN(_addr_TTF_GetFontDirection, _font)
		__r0 := Direction(_r0)
		return __r0
	}
	iSetFontScript = func(font *Font, script uint32) bool {
		_font := uintptr(unsafe.Pointer(font))
		_script := uintptr(script)
		_r0, _, _ := purego.SyscallN(_addr_TTF_SetFontScript, _font, _script)
		__r0 := _r0 != 0
		return __r0
	}
	iGetFontScript = func(font *Font) uint32 {
		_font := uintptr(unsafe.Pointer(font))
		_r0, _, _ := purego.SyscallN(_addr_TTF_GetFontScript, _font)
		__r0 := uint32(_r0)
		return __r0
	}
	iGetGlyphScript = func(ch uint32) uint32 {
		_ch := uintptr(ch)
		_r0, _, _ := purego.SyscallN(_addr_TTF_GetGlyphScript, _ch)
		__r0 := uint32(_r0)
		return __r0
	}
	iFontHasGlyph = func(font *Font, ch uint32) bool {
		_font := uintptr(unsafe.Pointer(font))
		_ch := uintptr(ch)
		_r0, _, _ := purego.SyscallN(_addr_TTF_FontHasGlyph, _font, _ch)
		__r0 := _r0 != 0
		return __r0
	}
	iGetGlyphImage = func(font *Font, ch uint32, image_type *ImageType) *sdl.Surface {
		_font := uintptr(unsafe.Pointer(font))
		_ch := uintptr(ch)
		_image_type := uintptr(unsafe.Pointer(image_type))
		_r0, _, _ := purego.SyscallN(_addr_TTF_GetGlyphImage, _font, _ch, _image_type)
		__r0 := (*sdl.Surface)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iGetGlyphImageForIndex = func(font *Font, glyph_index uint32, image_type *ImageType) *sdl.Surface {
		_font := uintptr(unsafe.Pointer(font))
		_glyph_index := uintptr(glyph_index)
		_image_type := uintptr(unsafe.Pointer(image_type))
		_r0, _, _ := purego.SyscallN(_addr_TTF_GetGlyphImageForIndex, _font, _glyph_index, _image_type)
		__r0 := (*sdl.Surface)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iGetGlyphMetrics = func(font *Font, ch uint32, minx *int32, maxx *int32, miny *int32, maxy *int32, advance *int32) bool {
		_font := uintptr(unsafe.Pointer(font))
		_ch := uintptr(ch)
		_minx := uintptr(unsafe.Pointer(minx))
		_maxx := uintptr(unsafe.Pointer(maxx))
		_miny := uintptr(unsafe.Pointer(miny))
		_maxy := uintptr(unsafe.Pointer(maxy))
		_advance := uintptr(unsafe.Pointer(advance))
		_r0, _, _ := purego.SyscallN(_addr_TTF_GetGlyphMetrics, _font, _ch, _minx, _maxx, _miny, _maxy, _advance)
		__r0 := _r0 != 0
		return __r0
	}
	iGetStringSize = func(font *Font, text string, length uintptr, w *int32, h *int32) bool {
		_font := uintptr(unsafe.Pointer(font))
		_text := uintptr(unsafe.Pointer(puregogen.BytePtrFromString(text)))
		defer runtime.KeepAlive(_text)
		_length := uintptr(length)
		_w := uintptr(unsafe.Pointer(w))
		_h := uintptr(unsafe.Pointer(h))
		_r0, _, _ := purego.SyscallN(_addr_TTF_GetStringSize, _font, _text, _length, _w, _h)
		__r0 := _r0 != 0
		return __r0
	}
	iGetStringSizeWrapped = func(font *Font, text string, length uintptr, wrap_width int32, w *int32, h *int32) bool {
		_font := uintptr(unsafe.Pointer(font))
		_text := uintptr(unsafe.Pointer(puregogen.BytePtrFromString(text)))
		defer runtime.KeepAlive(_text)
		_length := uintptr(length)
		_wrap_width := uintptr(wrap_width)
		_w := uintptr(unsafe.Pointer(w))
		_h := uintptr(unsafe.Pointer(h))
		_r0, _, _ := purego.SyscallN(_addr_TTF_GetStringSizeWrapped, _font, _text, _length, _wrap_width, _w, _h)
		__r0 := _r0 != 0
		return __r0
	}
	iMeasureString = func(font *Font, text string, length uintptr, max_width int32, measured_width *int32, measured_length *uintptr) bool {
		_font := uintptr(unsafe.Pointer(font))
		_text := uintptr(unsafe.Pointer(puregogen.BytePtrFromString(text)))
		defer runtime.KeepAlive(_text)
		_length := uintptr(length)
		_max_width := uintptr(max_width)
		_measured_width := uintptr(unsafe.Pointer(measured_width))
		_measured_length := uintptr(unsafe.Pointer(measured_length))
		_r0, _, _ := purego.SyscallN(_addr_TTF_MeasureString, _font, _text, _length, _max_width, _measured_width, _measured_length)
		__r0 := _r0 != 0
		return __r0
	}
	iCreateSurfaceTextEngine = func() *TextEngine {
		_r0, _, _ := purego.SyscallN(_addr_TTF_CreateSurfaceTextEngine)
		__r0 := (*TextEngine)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iDrawSurfaceText = func(text *Text, x int32, y int32, surface *sdl.Surface) bool {
		_text := uintptr(unsafe.Pointer(text))
		_x := uintptr(x)
		_y := uintptr(y)
		_surface := uintptr(unsafe.Pointer(surface))
		_r0, _, _ := purego.SyscallN(_addr_TTF_DrawSurfaceText, _text, _x, _y, _surface)
		__r0 := _r0 != 0
		return __r0
	}
	iDestroySurfaceTextEngine = func(engine *TextEngine) {
		_engine := uintptr(unsafe.Pointer(engine))
		purego.SyscallN(_addr_TTF_DestroySurfaceTextEngine, _engine)
	}
	iCreateRendererTextEngine = func(renderer *sdl.Renderer) *TextEngine {
		_renderer := uintptr(unsafe.Pointer(renderer))
		_r0, _, _ := purego.SyscallN(_addr_TTF_CreateRendererTextEngine, _renderer)
		__r0 := (*TextEngine)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iCreateRendererTextEngineWithProperties = func(props sdl.PropertiesID) *TextEngine {
		_props := uintptr(props)
		_r0, _, _ := purego.SyscallN(_addr_TTF_CreateRendererTextEngineWithProperties, _props)
		__r0 := (*TextEngine)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	purego.RegisterLibFunc(&iDrawRendererText, _hnd_ttf, "TTF_DrawRendererText")
	iDestroyRendererTextEngine = func(engine *TextEngine) {
		_engine := uintptr(unsafe.Pointer(engine))
		purego.SyscallN(_addr_TTF_DestroyRendererTextEngine, _engine)
	}
	iCreateGPUTextEngine = func(device *sdl.GPUDevice) *TextEngine {
		_device := uintptr(unsafe.Pointer(device))
		_r0, _, _ := purego.SyscallN(_addr_TTF_CreateGPUTextEngine, _device)
		__r0 := (*TextEngine)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iCreateGPUTextEngineWithProperties = func(props sdl.PropertiesID) *TextEngine {
		_props := uintptr(props)
		_r0, _, _ := purego.SyscallN(_addr_TTF_CreateGPUTextEngineWithProperties, _props)
		__r0 := (*TextEngine)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iGetGPUTextDrawData = func(text *Text) *GPUAtlasDrawSequence {
		_text := uintptr(unsafe.Pointer(text))
		_r0, _, _ := purego.SyscallN(_addr_TTF_GetGPUTextDrawData, _text)
		__r0 := (*GPUAtlasDrawSequence)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iDestroyGPUTextEngine = func(engine *TextEngine) {
		_engine := uintptr(unsafe.Pointer(engine))
		purego.SyscallN(_addr_TTF_DestroyGPUTextEngine, _engine)
	}
	iSetGPUTextEngineWinding = func(engine *TextEngine, winding GPUTextEngineWinding) {
		_engine := uintptr(unsafe.Pointer(engine))
		_winding := uintptr(winding)
		purego.SyscallN(_addr_TTF_SetGPUTextEngineWinding, _engine, _winding)
	}
	iGetGPUTextEngineWinding = func(engine *TextEngine) GPUTextEngineWinding {
		_engine := uintptr(unsafe.Pointer(engine))
		_r0, _, _ := purego.SyscallN(_addr_TTF_GetGPUTextEngineWinding, _engine)
		__r0 := GPUTextEngineWinding(_r0)
		return __r0
	}
	iCreateText = func(engine *TextEngine, font *Font, text string, length uintptr) *Text {
		_engine := uintptr(unsafe.Pointer(engine))
		_font := uintptr(unsafe.Pointer(font))
		_text := uintptr(unsafe.Pointer(puregogen.BytePtrFromString(text)))
		defer runtime.KeepAlive(_text)
		_length := uintptr(length)
		_r0, _, _ := purego.SyscallN(_addr_TTF_CreateText, _engine, _font, _text, _length)
		__r0 := (*Text)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iGetTextProperties = func(text *Text) sdl.PropertiesID {
		_text := uintptr(unsafe.Pointer(text))
		_r0, _, _ := purego.SyscallN(_addr_TTF_GetTextProperties, _text)
		__r0 := sdl.PropertiesID(_r0)
		return __r0
	}
	iSetTextEngine = func(text *Text, engine *TextEngine) bool {
		_text := uintptr(unsafe.Pointer(text))
		_engine := uintptr(unsafe.Pointer(engine))
		_r0, _, _ := purego.SyscallN(_addr_TTF_SetTextEngine, _text, _engine)
		__r0 := _r0 != 0
		return __r0
	}
	iGetTextEngine = func(text *Text) *TextEngine {
		_text := uintptr(unsafe.Pointer(text))
		_r0, _, _ := purego.SyscallN(_addr_TTF_GetTextEngine, _text)
		__r0 := (*TextEngine)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iSetTextFont = func(text *Text, font *Font) bool {
		_text := uintptr(unsafe.Pointer(text))
		_font := uintptr(unsafe.Pointer(font))
		_r0, _, _ := purego.SyscallN(_addr_TTF_SetTextFont, _text, _font)
		__r0 := _r0 != 0
		return __r0
	}
	iGetTextFont = func(text *Text) *Font {
		_text := uintptr(unsafe.Pointer(text))
		_r0, _, _ := purego.SyscallN(_addr_TTF_GetTextFont, _text)
		__r0 := (*Font)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iSetTextDirection = func(text *Text, direction Direction) bool {
		_text := uintptr(unsafe.Pointer(text))
		_direction := uintptr(direction)
		_r0, _, _ := purego.SyscallN(_addr_TTF_SetTextDirection, _text, _direction)
		__r0 := _r0 != 0
		return __r0
	}
	iGetTextDirection = func(text *Text) Direction {
		_text := uintptr(unsafe.Pointer(text))
		_r0, _, _ := purego.SyscallN(_addr_TTF_GetTextDirection, _text)
		__r0 := Direction(_r0)
		return __r0
	}
	iSetTextScript = func(text *Text, script uint32) bool {
		_text := uintptr(unsafe.Pointer(text))
		_script := uintptr(script)
		_r0, _, _ := purego.SyscallN(_addr_TTF_SetTextScript, _text, _script)
		__r0 := _r0 != 0
		return __r0
	}
	iGetTextScript = func(text *Text) uint32 {
		_text := uintptr(unsafe.Pointer(text))
		_r0, _, _ := purego.SyscallN(_addr_TTF_GetTextScript, _text)
		__r0 := uint32(_r0)
		return __r0
	}
	iSetTextColor = func(text *Text, r uint8, g uint8, b uint8, a uint8) bool {
		_text := uintptr(unsafe.Pointer(text))
		_r := uintptr(r)
		_g := uintptr(g)
		_b := uintptr(b)
		_a := uintptr(a)
		_r0, _, _ := purego.SyscallN(_addr_TTF_SetTextColor, _text, _r, _g, _b, _a)
		__r0 := _r0 != 0
		return __r0
	}
	purego.RegisterLibFunc(&iSetTextColorFloat, _hnd_ttf, "TTF_SetTextColorFloat")
	iGetTextColor = func(text *Text, r *uint8, g *uint8, b *uint8, a *uint8) bool {
		_text := uintptr(unsafe.Pointer(text))
		_r := uintptr(unsafe.Pointer(r))
		_g := uintptr(unsafe.Pointer(g))
		_b := uintptr(unsafe.Pointer(b))
		_a := uintptr(unsafe.Pointer(a))
		_r0, _, _ := purego.SyscallN(_addr_TTF_GetTextColor, _text, _r, _g, _b, _a)
		__r0 := _r0 != 0
		return __r0
	}
	iGetTextColorFloat = func(text *Text, r *float32, g *float32, b *float32, a *float32) bool {
		_text := uintptr(unsafe.Pointer(text))
		_r := uintptr(unsafe.Pointer(r))
		_g := uintptr(unsafe.Pointer(g))
		_b := uintptr(unsafe.Pointer(b))
		_a := uintptr(unsafe.Pointer(a))
		_r0, _, _ := purego.SyscallN(_addr_TTF_GetTextColorFloat, _text, _r, _g, _b, _a)
		__r0 := _r0 != 0
		return __r0
	}
	iSetTextPosition = func(text *Text, x int32, y int32) bool {
		_text := uintptr(unsafe.Pointer(text))
		_x := uintptr(x)
		_y := uintptr(y)
		_r0, _, _ := purego.SyscallN(_addr_TTF_SetTextPosition, _text, _x, _y)
		__r0 := _r0 != 0
		return __r0
	}
	iGetTextPosition = func(text *Text, x *int32, y *int32) bool {
		_text := uintptr(unsafe.Pointer(text))
		_x := uintptr(unsafe.Pointer(x))
		_y := uintptr(unsafe.Pointer(y))
		_r0, _, _ := purego.SyscallN(_addr_TTF_GetTextPosition, _text, _x, _y)
		__r0 := _r0 != 0
		return __r0
	}
	iSetTextWrapWidth = func(text *Text, wrap_width int32) bool {
		_text := uintptr(unsafe.Pointer(text))
		_wrap_width := uintptr(wrap_width)
		_r0, _, _ := purego.SyscallN(_addr_TTF_SetTextWrapWidth, _text, _wrap_width)
		__r0 := _r0 != 0
		return __r0
	}
	iGetTextWrapWidth = func(text *Text, wrap_width *int32) bool {
		_text := uintptr(unsafe.Pointer(text))
		_wrap_width := uintptr(unsafe.Pointer(wrap_width))
		_r0, _, _ := purego.SyscallN(_addr_TTF_GetTextWrapWidth, _text, _wrap_width)
		__r0 := _r0 != 0
		return __r0
	}
	iSetTextWrapWhitespaceVisible = func(text *Text, visible bool) bool {
		_text := uintptr(unsafe.Pointer(text))
		_visible := uintptr(0)
		if visible {
			_visible = 1
		}
		_r0, _, _ := purego.SyscallN(_addr_TTF_SetTextWrapWhitespaceVisible, _text, _visible)
		__r0 := _r0 != 0
		return __r0
	}
	iTextWrapWhitespaceVisible = func(text *Text) bool {
		_text := uintptr(unsafe.Pointer(text))
		_r0, _, _ := purego.SyscallN(_addr_TTF_TextWrapWhitespaceVisible, _text)
		__r0 := _r0 != 0
		return __r0
	}
	iSetTextString = func(text *Text, string string, length uintptr) bool {
		_text := uintptr(unsafe.Pointer(text))
		_string := uintptr(unsafe.Pointer(puregogen.BytePtrFromString(string)))
		defer runtime.KeepAlive(_string)
		_length := uintptr(length)
		_r0, _, _ := purego.SyscallN(_addr_TTF_SetTextString, _text, _string, _length)
		__r0 := _r0 != 0
		return __r0
	}
	iInsertTextString = func(text *Text, offset int32, string string, length uintptr) bool {
		_text := uintptr(unsafe.Pointer(text))
		_offset := uintptr(offset)
		_string := uintptr(unsafe.Pointer(puregogen.BytePtrFromString(string)))
		defer runtime.KeepAlive(_string)
		_length := uintptr(length)
		_r0, _, _ := purego.SyscallN(_addr_TTF_InsertTextString, _text, _offset, _string, _length)
		__r0 := _r0 != 0
		return __r0
	}
	iAppendTextString = func(text *Text, string string, length uintptr) bool {
		_text := uintptr(unsafe.Pointer(text))
		_string := uintptr(unsafe.Pointer(puregogen.BytePtrFromString(string)))
		defer runtime.KeepAlive(_string)
		_length := uintptr(length)
		_r0, _, _ := purego.SyscallN(_addr_TTF_AppendTextString, _text, _string, _length)
		__r0 := _r0 != 0
		return __r0
	}
	iDeleteTextString = func(text *Text, offset int32, length int32) bool {
		_text := uintptr(unsafe.Pointer(text))
		_offset := uintptr(offset)
		_length := uintptr(length)
		_r0, _, _ := purego.SyscallN(_addr_TTF_DeleteTextString, _text, _offset, _length)
		__r0 := _r0 != 0
		return __r0
	}
	iGetTextSize = func(text *Text, w *int32, h *int32) bool {
		_text := uintptr(unsafe.Pointer(text))
		_w := uintptr(unsafe.Pointer(w))
		_h := uintptr(unsafe.Pointer(h))
		_r0, _, _ := purego.SyscallN(_addr_TTF_GetTextSize, _text, _w, _h)
		__r0 := _r0 != 0
		return __r0
	}
	iGetTextSubString = func(text *Text, offset int32, substring *SubString) bool {
		_text := uintptr(unsafe.Pointer(text))
		_offset := uintptr(offset)
		_substring := uintptr(unsafe.Pointer(substring))
		_r0, _, _ := purego.SyscallN(_addr_TTF_GetTextSubString, _text, _offset, _substring)
		__r0 := _r0 != 0
		return __r0
	}
	iGetTextSubStringForLine = func(text *Text, line int32, substring *SubString) bool {
		_text := uintptr(unsafe.Pointer(text))
		_line := uintptr(line)
		_substring := uintptr(unsafe.Pointer(substring))
		_r0, _, _ := purego.SyscallN(_addr_TTF_GetTextSubStringForLine, _text, _line, _substring)
		__r0 := _r0 != 0
		return __r0
	}
	iGetTextSubStringsForRange = func(text *Text, offset int32, length int32, count *int32) **SubString {
		_text := uintptr(unsafe.Pointer(text))
		_offset := uintptr(offset)
		_length := uintptr(length)
		_count := uintptr(unsafe.Pointer(count))
		_r0, _, _ := purego.SyscallN(_addr_TTF_GetTextSubStringsForRange, _text, _offset, _length, _count)
		__r0 := (**SubString)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iGetTextSubStringForPoint = func(text *Text, x int32, y int32, substring *SubString) bool {
		_text := uintptr(unsafe.Pointer(text))
		_x := uintptr(x)
		_y := uintptr(y)
		_substring := uintptr(unsafe.Pointer(substring))
		_r0, _, _ := purego.SyscallN(_addr_TTF_GetTextSubStringForPoint, _text, _x, _y, _substring)
		__r0 := _r0 != 0
		return __r0
	}
	iGetPreviousTextSubString = func(text *Text, substring *SubString, previous *SubString) bool {
		_text := uintptr(unsafe.Pointer(text))
		_substring := uintptr(unsafe.Pointer(substring))
		_previous := uintptr(unsafe.Pointer(previous))
		_r0, _, _ := purego.SyscallN(_addr_TTF_GetPreviousTextSubString, _text, _substring, _previous)
		__r0 := _r0 != 0
		return __r0
	}
	iGetNextTextSubString = func(text *Text, substring *SubString, next *SubString) bool {
		_text := uintptr(unsafe.Pointer(text))
		_substring := uintptr(unsafe.Pointer(substring))
		_next := uintptr(unsafe.Pointer(next))
		_r0, _, _ := purego.SyscallN(_addr_TTF_GetNextTextSubString, _text, _substring, _next)
		__r0 := _r0 != 0
		return __r0
	}
	iUpdateText = func(text *Text) bool {
		_text := uintptr(unsafe.Pointer(text))
		_r0, _, _ := purego.SyscallN(_addr_TTF_UpdateText, _text)
		__r0 := _r0 != 0
		return __r0
	}
	iDestroyText = func(text *Text) {
		_text := uintptr(unsafe.Pointer(text))
		purego.SyscallN(_addr_TTF_DestroyText, _text)
	}
	iCloseFont = func(font *Font) {
		_font := uintptr(unsafe.Pointer(font))
		purego.SyscallN(_addr_TTF_CloseFont, _font)
	}
	iQuit = func() {
		purego.SyscallN(_addr_TTF_Quit)
	}
	iWasInit = func() int32 {
		_r0, _, _ := purego.SyscallN(_addr_TTF_WasInit)
		__r0 := int32(_r0)
		return __r0
	}
}
